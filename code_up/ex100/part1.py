# [6001 - 6050]

# 6002
# 다음을 실행시키면 "문장1”, "문장2"가 공백( )을 사이에 두고 출력된다.
print("문장1 문장2")
print("문장1", "문장2")

# 6004 - 6005
# 작은 따옴표(‘)가 들어있는 출력문을 출력하기 위해서는 큰 따옴표(“)로 출력하면 된다.큰 따옴표가 들어있는 출력문을 출력하기 위해서는 작은 따옴표로 출력하면 된다.
print(" 'Hello' ")
print(' "Hello" ')

# 6006
# 출력 형식에 필요한 따옴표와 출력할 문자인 따옴표를 구분하기 위하여 \를 이용하면 된다. 
# [출력예시 : "!@#$%^&*()'] 
print('"!@#$%^&()\'')

# 6007
# \도 안전하게 출력하기 위해서는 \\를 사용하는 것이 좋다. 
# [출력예시] : "C:\Download\'hello'.py"
print('"C:\\Download\\\'hello\'.py"')

# 6013
# 줄을 바꿔 문자 2개를 입력받고, 순서를 바꿔 한 줄씩 출력하기 위한 방법은 다음과 같은 방법도 존재한다.  
a = input()
b = input()
print("{b}\n{a}".format(b=b, a=a))

# 6014
# for 반복문은 반복할 수 있는 것 중에 문자열, 리스트, 딕셔너리, 범위가 있다. 
a = float(input())
for i in range(3): # 3번 출력 
	print(a)

# 6015
# input().split()를 사용하면, 공백을 기준으로 입력된 값들을 나누어(split) 자른다.
a, b = input().split()
print('{}\n{}'.format(int(a), int(b)))

# 6018
# input().split(':') 를 사용하면 콜론 ':' 기호를 기준으로 자르게 된다. 
# 또한, print(a, b, sep=':')를 사용하면 콜론 기호를 사이에 두고 값을 출력하게 된다.  
a, b = input().split(':')
print(a, b, sep=':')

# 6019
date = input().split('.')
date.reverse() # date 값 순서 변환
print('-'.join(date)) # -과 함께 date값 표시

# 6020
# 아무것도 없는 empty 문자는 작은 따옴표 2개를 붙여서 표현한다. 
# 위 식은 -를 제외하여 숫자를 모두 붙여 출력하게 된다. 
print(''.join(input().split('-')))

# 6021
# for 반복문은 문자열도 반복할 수 있다. 
s = input()
for i in s:
    print(i)

# 6022
# 문자는 +로 연결한다. 
# date[a:b]라고 하면, date라는 단어에서 a번째 문자부터 b-1번째 문자까지 잘라낸 부분을 의미한다.
date = input()
print(date[:2] + ' ' + date[2:4] + ' ' + date[4:])

# 6023
# : 형식으로 값이 입력될 때, [대괄호]를 이용하여 특정 인덱스의 값만 출력 가능하다.
date = input().split(':')
print(date[1])

# 6024
# 리스트 연산자는 연결(+), 반복(*), len()이 존재한다. 
# 문자열끼리 더하기 +를 실행하면 두 문자열을 합쳐 연결한(concatenate) 결과를 만들어 낸다.

# 6025 - 6026
# 정수 2개를 입력 받아서, 합을 출력하는 프로그램
# 입력되는 값은 기본적으로 문자열로 인식이 된다. 그렇기에 int()를 사용하여 정수 값으로 바꿔줘야 한다. 
# 실수 float() 또한 마찬가지다. 
a, b = input().split()
print('{}'.format(int(a)+int(b)))

# 6027 - 6029
# 10진 정수 입력을 받아 16진수로 출력하기 
# %x로 출력하면 16진수 소문자로 출력된다. 
# %o로 출력하면 8진수 문자로 출력된다. 
# %X로 출력하면 16진수 대문자로 출력된다.
# 대문자로 출력하기 위해서 upper()함수도 존재한다. print(‘%x’.upper()%int(input()))
# print('%x' %n)
# print('%x' %int(input()))

# 문자열 포매팅 : % 대입, format(), f-string
# 파이썬에서 문자열에 변수 값을 출력하는 방법은 다양하다.
# 1) % 대입은 문자열에 값을 대입하는 방법인데 c언어에서 값을 포맷하는 방식과 유사하다.
print('ten: %d' %10) # ten: 10
n = 10
print('ten: %d' %n) # tem: 10

a = 10
b = 20 
print('%d + %d = %d' %(a, b, a+b))
# 10 + 20 = 30

# 우측으로 3자리를 차지하며 남는 부분은 공백으로 채우기 
print('%3d + %3d = %3d' %(a,b,a+b))
# 우측으로 3자리를 차지하며 남는 부분은 0으로 채우기
print('%03d + %03d = %03d' %(a,b,a+b))
# 좌측으로 3자리를 차지하며 남는 부분은 공백으로 채우기 
print('%-3d + %-3d = %-3d' %(a,b,a+b))

# %s(문자열,string), %c(문자1개,character), %d(정수,integer),%f(부동소수,floating-point), %o(8진수), %x(16진수), %%(Literal %,문자로서 %자체를 표현)

# 2) format() 메서드
# format() 메서드는 문자열 안에 변수를 대입하기 편하게 해주는 메서드이다. 

# 자동 인덱싱, {} 안에 인덱스를 입력하지 않을 경우 앞자리부터 0,1,2 순서로 자동 인덱싱된다.
print('{} + {} = {}'.format(a,b,a+b))

# 지정 인덱싱, {} 안에 인덱스를 입력해 각 위치에 넣을 값 순서를 정해줄 수 있다.
print('{0} + {1} = {2}'.format(a,b,a+b))
print('{1} + {0} = {2}'.format(a,b,a+b))

# {0}, {1}과 같은 숫자 인덱싱 방법 대신 {number}, {name}같이 키, 값 방법도 사용할 수 있다. 
print('I have a {number} apples, and my name is {name}'.format(number=10, name= 'Jhon'))

# format() 좌측정렬
print("1{0:<10}2".format("python"))
print("1{:<10}2".format("python"))
# format() 우측정렬
print("1{0:>10}2".format("python"))
print("1{:>10}2".format("python"))
# format() 가운데 정렬
print("1{0:^10}2".format("python"))
print("1{:^10}2".format("python"))

# 3) f-string
# f-string을 이용해 값 대입하기
print(f'{a} + {b} + {a+b}')
print(f'{b} + {a} + {a+b}')

s = 'python'
# f-string 좌측 정렬
print(f'1{s:<10}2')
# f-string 우측 정렬
print(f'1{s:>10}2')
# f-string 가운데 정렬
print(f'1{s:^10}2')

# f-string을 이용해 가운데 정렬하며 공백을 '-'로 채우기
print(f'{s:-^10}')
# f-string을 이용해 좌측 정렬하며 공백을 '!'로 채우기
print(f'{s:!<10}')
# f-string을 이용해 좌측 정렬하며 공백을 '0'로 채우기
print(f'{s:0<10}')
# f-string을 이용해 우측 정렬하며 공백을 '0'로 채우기
print(f'{s:0>10}')

# 6030
# 영문자 1개를 입력받아 10진수 유니코드 값으로 출력하기 
# ord()는 어떤 문자의 순서 위치 값을 의미하며, 실제로 각각의 문자들에는 연속된 정수 값이 순서에 따라 부여 되어 있다. A:65 B:66, C:67 … 
# ord(c) : 문자 c를 10진수로 변환한 값
# 컴퓨터로 저장되고 처리되는 모든 데이터들은 2진수 형태로 정수화 되어야 하는데, 컴퓨터에 문자를 저장하는 방법으로는 아스키코드나 유니코드가 자주 사용된다. 예를 들어, 영문 대문자 A는 10진수 65로 표현하고, 2진수 값 1000001로 바꾸어 컴퓨터 내부에 저장한다. 
n = ord(input())
print(n)

# 6031
# 10진 정수 1개를 입력받아 유니코드 문자로 출력하기 
# chr()는 저장되어 있는 정수 값을 유니코드 문자(chracter)로 바꿔 출력한다. 
# chr()는 정수값->문자, ord()는 문자->정수값 형태로 바꿔주는 서로 반대 방향으로 바꾸어 주는 기능을 한다.
c = int(input())
print(chr(c))

# 6033
# 문자 하나를 입력 받아 그 다음 문자를 출력하기
print(chr(ord(input())+1))

# 6036
# 단어와 반복 횟수를 입력받아 여러 번 출력하기 
w, n = input().split()
print(w*int(n))

# 6037
# 반복 횟수와 문장을 입력받아 여러 번 출력하기 
n = input()
s = input()
print(int(n)*s)

# 6038
# a를 b번 곱한 거듭제곱을 출력하기
a, b = input().split()
c = int(a)**int(b) 
print(c)

# 6040
# 정수 a,b를 입력받아 a를 b로 나눈 몫 출력하기 
a, b = input().split()
print(int(a) // int(b))

# 6042
# 실수 1개를 입력 받아 소숫점 이하 두 번째 자리까지의 정확도로 반올림한 값 출력하기
a=float(input())
print(format(a, ".2f")) # 원하는 자리까지의 정확도로 반올림 된 실수 값을 만들어 준다. 
# 여기서 만들어진 값은 소수점 아래 3번째 자리에서 반올림한 값이다. 

# 6043
f1, f2 = input().split()
print(format(float(f1) / float(f2), ".3f"))

# map 내장 함수 : 파이썬의 내장 함수인 map()은 여러 개의 데이터를 한 번에 다른 형태로 변환하기 위해서 사용된다. 따라서, 여러 개의 데이터를 담고 있는 list나 tuple을 대상으로 주로 사용하는 함수이다. 
# map(변환 함수, 순회 가능한 데이터)
# map()함수는 두번째 인자로 넘어온 데이터가 담고있는 모든 데이터에 변환 함수를 적용하여 다른 형태의 데이터를 반환한다. 
a, b = map(float, input().split())
print('%.3f' %round((a / b), 3))

# 6044
# 정수 2개 입력 받아 자동 계산하기 (합, 차, 곱, 몫, 나머지, 나눈 값)
# round 함수 : round(number, [ndigits])
# 반환형은 인자로 들어온 number가 숫자 타입인 경우 정수 혹은 실수를 반환하며 만약 인자로 들어온 number가 숫자 타입이 아닌 경우에는 none을 반환한다. 
# 첫 번째 인자 number에는 반올림 하고싶은 숫자를 집어 넣으며, 두 번째 인자 ndigits는 정밀도에 관련된 수이다. 이는 자릿수를 뜻한다고 생각하면 된다. 예를 들어 소수점 2번째까지 반올림하는 것을 원하면 2를 집어 넣는 식으로 진행하면 된다. 
a, b = input().split()
a = int(a)
b = int(b)
if(a >= 0 and b != 0):
    print(a + b)
    print(a - b)
    print(a * b)
    print(a // b)
    print(a % b)
    print(round((a / b), 2)) # print(format(a / b, ".2f"))

# 6045
# 정수 3개를 입력받아 합과 평균 출력하기 
a, b, c = input().split()
a = int(a)
b = int(b)
c = int(c)
print(a+b+c, format((a+b+c)/3, ".2f")) # print(a + b + c, round(((a + b + c) / 3), 2))

# 연산자의 우선순위 
# 위에 있는 것이 낮은 우선순위(가장 늦게 연산됨) 
# 아래 있는게 높은 우선순위(가장 먼저 연산됨) 
# := (대입 표현식)
# lambda
# if-else
# or
# and
# not x
# in, not in, is, is not, <, <=, >, >=, !=, ==
# | (비트 OR)
# ^ (비트 XOR)
# & (비트 AND)
# <<, >> (시프트)
# +, -
# *, @, /, //, % (곱셈, 행렬곱셈, 나눗셈, 정수 나눗셈, 나머지)
# +x, -x, ~x (양, 음, 비트 NOT)
# ** (거듭제곱)
# await x (await 표현식)
# x[index], x[index:index], x(arguments...), x.attribute (subscription, slicing, 호출, attribute 참조)
# (expressions...), [expressions...], {key:value...}, {expression...} (결합binding 또는 괄호친 표현식, 리스트 디스플레이, 딕셔너리 디스플레이, 집합 디스플레이)


# 6046
# 비트시프트 연산 : 정수 1개를 입력받아 2배 곱해 출력하기 
print(int(input())<<1)

# *2를 계산한 값을 출력해도 되지만, 정수를 2배로 곱하거나 나누어 계산해 주는 비트단위시프트연산자 <<, >>를 이용할 수 있다. 
# 컴퓨터 내부에는 2진수 형태로 값들이 저장되기 때문에 2진수 형태로 저장되어 있는 값들을 왼쪽(<<)이나 오른쪽(>>)으로 지정한 비트 수만큼 밀어주면 2배씩 늘어나거나 1/2로 줄어들게 된다.  
# 왼쪽 비트시프트(<<)가 될 때에는 오른쪽에 0이 주어진 개수만큼 추가되고, 오른쪽 비트시프트(>>)가 될 때에는 왼쪽에 0(0또는 양의 정수인 경우)이나 1(음의 정수인 경우)이 개수만큼 추가되고, 가장 오른쪽에 있는 1비트는 사라진다. 
# 예시) 정수 10의 2진수 표현은 1010이다. 
# 10<<1을 계산하면 10100이된다. 이 값은 10진수로 20이며, 10>>1을 계산하면 101이된다. 이 값은 10진수로 5이다. 
# a : 1010, a<<1 : 10100 = 20, a>>2 : 10 = 2

# n = 10에서 10은 10진수 정수 값으로 인식이 되며, 변수 n에 문자열을 저장하고 싶다면, n= "10" 또는 n= '10'으로 작성해 넣으면 된다.  
# n=10.0으로 작성해 넣으면 자동으로 실수 값으로 저장이 된다. 
# n=0o10으로 작성해 넣으면 8진수(octal) 10으로 인식이 되어 10진수 8값이 저장된다. 
# n=0xf나 n=0XF으로 작성해 넣으면 16진수(hexadecimal) F로 인식이 되어 10진수 15값으로 저장된다. 
# 파이썬에서 실수 값에 대한 비트시프트 연산은 허용되지 않고 오류가 발생한다. 

# 6047 
# 비트시프트연산 : 2의 거듭제곱 배로 곱해 출력하기 
# 정수 2개(a,b)를 입력받아 a를 2^b배 곱한 값으로 출력해 보자
a, b = input().split()
a = int(a)
b = int(b)
print(a<<b)

# 6048 
# 정수 2개 입력 받아 비교하기1 
# print(123<456) 은 비교 연산자인 <의 계산 결과인 True가 출력된다. 123, 456은 숫자로 작성된 단어이기 때문에 10진수로 인식이 된다. 
# 어떤 값을 비교하기 위해 비교/관계(comparison/relational) 연산자(operator)를 사용할 수 있다. 비교/관계 연산자 < (less than sign)는 왼쪽의 값이 오른쪽 값보다 작은 경우 True를 계산하고, 그 외의 경우에는 False로 계산한다. 
# 비교/관계 연산자도 일반적인 사칙연산자처럼 주어진 두 수를 이용해 계산을 수행하고, 그 결과를 참 또는 거짓으로 계산해 주는 연산자이다. 
# 비교/관계 연산자는 <.>, <=, >=, ==, != 총 6개가 있다. 
# True, False로 표현하고 저장하는 값을 bool, Boolean 값이라고 한다. 또 다른 형태의 데이터 형이다.
a, b = map(int, input().split())
print(a < b)
 





 

