# [6051 - 6079]

# 6052 – 6056
# bool()을 이용하면 입력된 식이나 값을 평가해 불 형의 값을 출력해 준다. True/False
# 식이나 값을 계산해서 결과값이 만들어지는 것을 평가라고 한다. 
# 파이썬에서 정수값 0은 False로 평가되고, 그 외의 값들은 모두 True로 평가된다. 
n = int(input())
print(bool(n))

a = bool(int(input())) # 와 같은 형태로 겹쳐 작성하게 될 경우, 한 번에 한 단계씩 계산, 처리, 평가가 된다. 이 명령문 같은 경우 input(), int(), bool() 순서로 한 번에 한 단계씩 계산, 처리, 평가된다. 
print(not a) # 어떤 불 값이나 변수에 not True, not False, not a 와 같은 계산이 가능하다. 참 또는 거짓의 논리값을 역으로 바꾸기 위해서 not 예약어를 사용할 수 있다. 불 값들 사이의 논리 not, and, or 연산 결과도 마찬가지로 True, False의 불 값으로 계산이 된다. 

# and 예약어는 주어진 두 불 값이 모두 True 일 때만 True로 계산하고, 나머지는 False로 계산하게 된다. 이러한 논리연산을 AND 연산이라고 부르며, 집합기호 교집합으로 표시하기도 한다. 
a, b = input().split()
print(bool(int(a)) and bool(int(b))) # 둘 다 참일 경우만 참 출력하기 

# or 예약어는 주어진 두 불 값 중에서 하나라도 True이면 True로 계산하고, 나머지 경우는 False로 계산한다. 이러한 논리연산을 OR 연산이라고 부르며, 집합기호 합집합으로 표시한다. 

# 참/거짓이 서로 다를 때에만 참 출력하기 
# 2개의 정수값이 입력될 때, 불 값이 서로 다를 때에만 True를 출력하는 프로그램 작성하기 
# 참, 거짓이 서로 다를 때에만 True로 계산하는 논리연산을 XOR 연산이라고 부른다. 논리연산자는 사칙(+,-,*,/) 연산자와 마찬가지로 여러 번 중복해서 사용할 수 있는데, 사칙 연산자와 마찬가지로 계산 순서를 표시하기 위해 괄호를 사용할 수 있다. 
a, b = input().split()
c = bool(int(a))
d = bool(int(b))
print((c and (not d)) or ((not c) and d))

# 6057 - 6058
# 참/거짓이 서로 같을 때에만 참 출력하기 
a, b = map(int, input().split())
if (bool(a) == bool(b)):
    print(True)
else:
    print(False)

# 둘 다 거짓일 경우, 참 출력하기 
a, b = map(int, input().split())
print(bool(a) is False and bool(b) is False)

# 6059 - 6062
# 비트단위로 NOT 하여 출력하기 
# 입력 된 정수를 비트단위로 참/거짓으로 바꾼 후 정수로 출력한다. 
# 비트단위(bitwise) 연산자 ~를 붙이면 된다. 

# 비트단위(bitwise) 연산자 
# ~(bitwise not), &(bitwise and), |(bitwise or), ^(bitwise xor), <<(bitwise left shift), >>(bitwise right shift)

# 컴퓨터에 저장되는 모든 데이터들은 2진수 형태로 바뀌어 저장된다. 0과 1로만 구성되는 비트단위들로 변환되어 저장되는데, 양의 정수는 2진수 형태로 바뀌어 저장되고, 음의 정수는 “2의 보수 표현” 방법으로 저장된다. 

# 32비트 형의 정수 0은 
# 0000000 00000000 00000000 00000000
# 그리고 -1은 0에서 1을 더 빼고 32비트만 표시하는 형태로 
# 11111111 11111111 11111111 11111111 
# -2는 -1에서 1을 더 빼면 된다
# 11111111 11111111 11111111 11111110 
# 이러한 내용을 간단히 표현하게 되면, 정수 n이라고 할 때, 
# ~n = -n – 1
# -n = ~n + 1 과 같은 관계로 표현할 수 있다. 
print(~int(input()))

# 비트단위 연산자 &의 경우 
# 두 비트열이 주어졌을 때, 둘 다 1인 부분의 자리만 1로 만들어주면 된다. 
a, b = map(int, input().split())
print(a & b)

# 비트단위 연산자 |의 경우 
# 비트 단위 OR 연산은 둘 중 하나라도 1인 자리를 1로 만들어주는 것과 같다. 

# 비트단위 연산자 ^의 경우 
# ^는 수학식에서 거듭제곱(power)을 나타내는 기호와 모양은 같지만, 전혀 다른 배타적 논리합(xor, 서로 다를 때 1)의 의미를 가진다. 

# 6063
# 기초-3항 연산 : 정수 2개 입력받아 큰 값 출력하기 

# 3개의 요소로 이뤄지는 3항 연산은 “x if C else y” 형태로 작성된다.
# C : True 또는 False를 평가할 조건식(conditional expression) 또는 값
# x : C의 평가 결과가 True 일 때 사용할 값 
# y : C의 평가 결과가 True가 아닐 때 사용할 값 
# 조건식 또는 값이 True이면 x값이 사용되고, True가 아니면 y값이 사용되도록 하는 코드
# 3항 연산을 중첩하여 이용하면 여러 값들을 순서대로 비교하여 가장 큰/작은 값을 계산할 수 있다. 여러 가지 연산자가 동시에 사용된 식이 있을 때, 어떤 우선순위에 따라 순서대로 계산이 되는지 찾아보도록 한다. “연산자 우선순위”를 검색하면 우선순위와 결합방향이 나오게 된다. 대입(assign) 연산자 = 의 우선 순위는 가장 낮고, 오른쪽에서 왼쪽의 결합방향을 가진다. 다시 말해, if else문을 이용하여 한 줄에서 참일 경우 값 if 조건 else 거짓일 경우 값처럼 가운데 조건문이 참인 경우 좌측에 있는 값을 반환하고, 거짓인 경우 우측에 있는 값을 반환한다. 

# 예를 들어,
# (a if a>b else b) if ((a if a>b else b)>c) else c
# 와 같은 계산식은 a, b, c 의 값 중 가장 큰 값으로 계산된다.
a, b = input().split()
a = int(a)  #변수 a에 저장되어있는 값을 정수로 바꾸어 다시 변수 a에 저장
b = int(b)
c = (a if (a>=b) else b)
print(int(c))

a, b = map(int, input().split())
print(a if a > b else b)

# 6071
# while문을 사용할 때, 처음 조건 검사를 통과하기 위해서는 0이 아닌 값을 임의로 저장하도록 한다. 
# n = 1 
# while n != 0:
# … 

# 6074
# 문자 1개를 입력 받아 알파벳 출력하기 
# 알파벳 문자 a의 정수값은 ord(‘a’)로 알아낼 수 있다. chr(정수값)을 이용하면 유니코드로 문자를 출력할 수 있다. 
# 또한, print(…, end=’ ’)와 같이 작성하면 값 출력후, 공백문자 ‘ ‘를 출력한다. 즉, 마지막에 줄을 바꾸지 않고 빈칸만 띄운다. end=’\n’으로 작성하거나 생략을 하게 된다면 값을 출력 후 마지막(end)에 줄바꿈이 된다. 
c = ord(input())
t = ord('a')
while t<=c :
  print(chr(t), end=' ')
t += 1

# 6075 - 6076
# 정수 1개 입력 받아 그 수까지 출력하기 
# 정수 0부터 100까지 중 1개가 입력된다. 
# range(끝)
# range(시작, 끝)
# range(시작, 끝, 증감)
num = int(input())
n = 0
while(n < num+1):
    print(n, end='\n')
    n += 1

n = int(input())
for i in range(n + 1):
    print(i)

# 6077
# 짝수 합 구하기 
# 정수 1개를 입력받아 1부터 그 수까지 짝수의 합을 구하기 
n = int(input())
s = 0
for i in range(1, n+1) :
  if i%2==0:
    s += i

print(s)

# 홀수의 경우는 다음과 같다. 
n = int(input())
s = 0
for i in range(1, n+1):
  if i%2==1:
    s += i

print(s)

# 6078
# 원하는 문자가 입력될 때까지 반복 출력하기 
c = ''
while(c != 'q'):
    c = input()
    print(c)

while True:
  n = input()
  print(n)
  if n == 'q':
    break
 
# 6079
# 언제까지 더해야 할까? 
# 1, 2, 3 …을 계속 더해 나갈 때, 그 합이 입력한 정수보다 같거나 작을 때까지만 계속 더하는 프로그램 작성하기 
# 즉, 1부터 n까지 정수를 계속 더해 나간다고 할 때, 어디까지 더해야 입력한 수보다 같거나 커지는 지를 알아보고자 하는 문제이다. 
n = int(input())
i = 0 
s = 0
while(s < n):
  i += 1
  s += i
print(i)

