# 입력 : 첫째 줄에 N(2 <= N <= 100,000)과 K(2 <= K <=100,000)가 공백으로 구분되며 각각 자연수로 주어진다.
#       이때, 입력으로 주어지는 N은 항상 K보다 크거나 같다.
# 출력 : 첫째 줄에 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 횟수의 최솟값을 출력한다.
# 조건 1) N에서 1을 뺀다, 2) N을 K로 나눈다.

n, k = map(int, input().split())
result = 0

# N이 K 이상이라면 계속 나누기
while n >= k:
    # N이 K로 나누어 떨어지지 않는다면 N에서 1씩 빼기
    while n % k != 0:
        n -= 1
        result += 1

    # K로 나누기
    n //= k
    result += 1

# 마지막에 남은 수에 대하여 1씩 빼기
while n > 1:
    n -= 1
    result += 1

print(result)
'''
# 시간 복잡도 더 줄일 수 있는 문제
while True:
    # (N == K로 나누어떨어지는 수)가 될 때까지 1씩 빼기
    target = (n //
              k) * k  # N이 K로 나누어 떨어지지 않을 떄 가장 가까운 K로 나뉘어 떨어지는 수가 어떤 것인지 찾는
    result += (n - target)  # 1을 빼주는 연산 몇 번 할 지 넣어주기
    n = target
    # N이 K보다 작을 때(더 이상 나눌 수 없을 때) 반복문 탈출
    if n < k:
        break
    # k로 나누기
    result += 1
    n //= k
# 마지막에 남은 수에 대하여 1씩 빼기
result += (n - 1)
print(result)
'''
